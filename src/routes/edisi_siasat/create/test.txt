<script>
    import { Card, Button, Label, Input, Textarea, Alert, Fileupload, Spinner, Span } from 'flowbite-svelte';
    import { CheckCircleOutline, CloseOutline } from 'flowbite-svelte-icons';
    import Tesseract from 'tesseract.js';
    import { onMount, onDestroy } from 'svelte';

    let textareaprops = {
        id: 'message',
        name: 'message',
        label: 'Your message',
        rows: 5,
        placeholder: 'Write details here...'
    };
    let esDetails = '';
    let esDate = '';
    let esSourceName = '';
    let esSourceURL = '';
    let image = null;
    let imageDetails = '';
    let imagePreviewUrl = null;
    let images = []; // Array to store multiple images
    let imagePreviewUrls = []; // Array to store URLs for image previews
    let imageDetailsArray = []; // Array to store recognized texts for each image
    let isLoading = false;
    

    function displaySuccessBanner(message) {
        const successDiv = document.getElementById('successMessage');
        successDiv.style.display = 'block';
        successDiv.innerHTML = message;

        setTimeout(() => {
            successDiv.style.display = 'none';
        }, 3000);
    }

    function displayErrorBanner(message) {
        const errorDiv = document.getElementById('errorMessage');
        errorDiv.style.display = 'block';
        errorDiv.textContent = message;

        setTimeout(() => {
            errorDiv.style.display = 'none';
        }, 3000);
    }

    // function handleFiles(event) {
    //     const files = event.target.files;
    //     if (files.length > 0) {
    //         const file = files[0];
    //         if (imagePreviewUrl) {
    //             URL.revokeObjectURL(imagePreviewUrl);
    //         }
    //         imagePreviewUrl = URL.createObjectURL(file);
    //         image = file;
    //     }
    // }

    function handleFiles(event) {
        const files = Array.from(event.target.files);
        if (files.length > 0) {
            images = files;
            imagePreviewUrls = files.map(file => URL.createObjectURL(file));
        }
    }


    onMount(() => {
        var myFile = document.getElementById('image-upload');
        if (myFile) {
            myFile.addEventListener('change', recognizeText);
        }
    });

    onDestroy(() => {
        if (imagePreviewUrl) {
            URL.revokeObjectURL(imagePreviewUrl);
        }
    });

    // async function recognizeText(event) {
    //     handleFiles(event);

    //     if (!image) {
    //         console.log('No file selected');
    //         return;
    //     }

    //     isLoading = true;

    //     try {
    //         const result = await Tesseract.recognize(image);
    //         imageDetails = result && result.data.text ? result.data.text : 'No text recognized';
    //         const convertedTextElement = document.getElementById("convertedText");
    //         convertedTextElement.value = imageDetails;
    //     } catch (error) {
    //         displayErrorBanner('Error during text recognition: ' + error.message);
    //     } finally {
    //         isLoading = false;
    //     }
    // }

    async function recognizeText() {
        if (!images.length) {
            console.log('No files selected');
            return;
        }

        isLoading = true;
        imageDetailsArray = [];

        try {
            for (const image of images) {
                const result = await Tesseract.recognize(image);
                const text = result && result.data.text ? result.data.text : 'No text recognized';
                console.log(text);
                imageDetailsArray.push(text);
            }
        } catch (error) {
            displayErrorBanner('Error during text recognition: ' + error.message);
            console.log( error.message);
        } finally {
            isLoading = false;
        }
    }

    async function addItem() {
        const formData = new FormData();
        formData.append('esDetails', esDetails);
        formData.append('esDate', esDate);
        formData.append('esSourceName', esSourceName);
        formData.append('esSourceURL', esSourceURL);
        formData.append('imageDetails', imageDetails);
        formData.append('image', image);

        const response = await fetch('/edisi_siasat/getAdd', {
            method: 'POST',
            body: formData
        });

        const result = await response.json();

        if (result.success) {
            displaySuccessBanner('Info added.');
            resetForm();
        } else {
            displayErrorBanner('Failed to add.');
        }
    }

    function resetForm() {
        esDetails = '';
        esDate = '';
        esSourceName = '';
        esSourceURL = '';
        image = null;
        imagePreviewUrl = null;
        imageDetails = '';
        const fileInput = document.getElementById('image-upload');
        if (fileInput) {
            fileInput.value = '';
        }
        const textArea = document.getElementById('convertedText');
        if (textArea) {
            textArea.value = '';
        }
    }
</script>

<div class="mx-auto max-w-6xl font-sans mt-10">
    <Alert color="green" id="successMessage" style="display:none;">
        <CheckCircleOutline slot="icon" class="w-4 h-4"/>
    </Alert>
    <Alert color="red" id="errorMessage" style="display:none;">
        <CloseOutline slot="icon" class="w-4 h-4"/>
    </Alert>
</div>

<div class="mx-auto max-w-6xl font-sans text-lg rounded-lg mt-10 ">
    <Card size="xl">
        <form on:submit|preventDefault={addItem}>
            <div class="grid gap-4 sm:grid-cols-2 sm:gap-6">
                <div class="sm:col-span-2">
                    <Label for="default-input" class="block mb-2">Posted Date</Label>
                    <Input type="datetime-local" bind:value={esDate}  />
                </div>
                <div class="sm:col-span-1">
                    <Label for="default-input" class="block mb-2">Source Name</Label>
                    <Input type="text" bind:value={esSourceName}  />
                </div>
                <div class="sm:col-span-1">
                    <Label for="default-input" class="block mb-2">Source URL</Label>
                    <Input type="text" bind:value={esSourceURL}  />
                </div>
                <div class="sm:col-span-2">
                    <Label for="default-input" class="block mb-2">Details</Label>
                    <Textarea {...textareaprops} bind:value={esDetails} />
                </div>
                <div class="sm:col-span-2">
                    <div>
                        <Label for="default-input" class="block mb-2">Upload Image</Label>
                        <!-- <Fileupload  id="image-upload" class="mb-4" name="img_url" on:change={handleFiles}/> -->
                        <Fileupload id="image-upload" class="mb-4" name="img_url" multiple on:change={handleFiles}/>
                        <!-- <div class="text-center">
                            {#if imagePreviewUrl}
                                <img src={imagePreviewUrl} alt="" class="mt-2" style="height: 200px;"/>
                            {/if}
                            {#if isLoading}
                                <Span>
                                    <Spinner/>
                                    Processing ...
                                </Span>
                            {/if}
                        </div> -->
                        <div class="grid grid-cols-2 gap-4">
                        {#each imagePreviewUrls as url, index}
                            
                                <div>
                                    <img src={url} alt={`Image ${index + 1}`} class="mt-2" style="height: 200px;"/>
                                </div>
                                <div>
                                    <Textarea cols="30" rows="10" value={imageDetailsArray[index] || ''} ></Textarea>
                                </div>
                            
                        {/each}
                        </div>
                    </div>
                    <!-- <div>
                        <Label for="default-input" class="block mb-2">Image Converted</Label>
                        <Textarea cols="30" rows="10" name="img_details" id="convertedText" on:change={handleFiles}>
                        </Textarea>
                    </div> -->
                </div>
                <div class="sm:col-span-2">
                    <Button class="w-fit" type="submit">Add Item</Button>
                </div>
            </div>
        </form>
    </Card>
</div>
